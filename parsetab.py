
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND COMP_DIFF COMP_EQ COMP_EQ_GR COMP_EQ_LE COMP_GR COMP_LE DIVIDE EQUAL LPAREN MINUS NAME NUMBER OR PLUS RPAREN SEMICOLON TIMESblock : block statement\n             | statementstatement : expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEstatement : NAME EQUAL expression SEMICOLONempty :statement : expression COMP_EQ expression\n                 | expression COMP_LE expression\n                 | expression COMP_GR expression\n                 | expression COMP_DIFF expression\n                 | expression COMP_EQ_GR expression\n                 | expression COMP_EQ_LE expression '
    
_lr_action_items = {'NAME':([0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,],[4,4,-2,22,22,-10,-1,-3,22,22,22,22,22,22,22,22,22,22,22,-8,-11,-14,-15,-16,-17,-18,-19,-4,-5,-6,-7,-9,-12,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[5,5,-2,17,-11,5,5,-10,-1,-3,5,5,5,5,5,5,5,5,5,5,5,-8,-11,17,17,17,17,17,17,17,-4,-5,-6,-7,17,-9,-12,]),'LPAREN':([0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,],[6,6,-2,6,6,-10,-1,-3,6,6,6,6,6,6,6,6,6,6,6,-8,-11,-14,-15,-16,-17,-18,-19,-4,-5,-6,-7,-9,-12,]),'NUMBER':([0,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,],[7,7,-2,7,7,-10,-1,-3,7,7,7,7,7,7,7,7,7,7,7,-8,-11,-14,-15,-16,-17,-18,-19,-4,-5,-6,-7,-9,-12,]),'$end':([1,2,7,8,9,21,22,24,25,26,27,28,29,30,31,32,33,35,36,],[0,-2,-10,-1,-3,-8,-11,-14,-15,-16,-17,-18,-19,-4,-5,-6,-7,-9,-12,]),'SEMICOLON':([3,4,7,21,22,30,31,32,33,34,35,],[9,-11,-10,-8,-11,-4,-5,-6,-7,36,-9,]),'COMP_EQ':([3,4,7,21,22,30,31,32,33,35,],[10,-11,-10,-8,-11,-4,-5,-6,-7,-9,]),'COMP_LE':([3,4,7,21,22,30,31,32,33,35,],[11,-11,-10,-8,-11,-4,-5,-6,-7,-9,]),'COMP_GR':([3,4,7,21,22,30,31,32,33,35,],[12,-11,-10,-8,-11,-4,-5,-6,-7,-9,]),'COMP_DIFF':([3,4,7,21,22,30,31,32,33,35,],[13,-11,-10,-8,-11,-4,-5,-6,-7,-9,]),'COMP_EQ_GR':([3,4,7,21,22,30,31,32,33,35,],[14,-11,-10,-8,-11,-4,-5,-6,-7,-9,]),'COMP_EQ_LE':([3,4,7,21,22,30,31,32,33,35,],[15,-11,-10,-8,-11,-4,-5,-6,-7,-9,]),'PLUS':([3,4,7,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,],[16,-11,-10,-8,-11,16,16,16,16,16,16,16,-4,-5,-6,-7,16,-9,]),'TIMES':([3,4,7,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,],[18,-11,-10,-8,-11,18,18,18,18,18,18,18,18,18,-6,-7,18,-9,]),'DIVIDE':([3,4,7,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,],[19,-11,-10,-8,-11,19,19,19,19,19,19,19,19,19,-6,-7,19,-9,]),'EQUAL':([4,],[20,]),'RPAREN':([7,21,22,23,30,31,32,33,35,],[-10,-8,-11,35,-4,-5,-6,-7,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,],[1,]),'statement':([0,1,],[2,8,]),'expression':([0,1,5,6,10,11,12,13,14,15,16,17,18,19,20,],[3,3,21,23,24,25,26,27,28,29,30,31,32,33,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> block statement','block',2,'p_bloc','calc1.py',60),
  ('block -> statement','block',1,'p_bloc','calc1.py',61),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','calc1.py',74),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calc1.py',79),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calc1.py',80),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calc1.py',81),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calc1.py',82),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc1.py',93),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calc1.py',97),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc1.py',101),
  ('expression -> NAME','expression',1,'p_expression_name','calc1.py',105),
  ('statement -> NAME EQUAL expression SEMICOLON','statement',4,'p_expression_affect','calc1.py',109),
  ('empty -> <empty>','empty',0,'p_empty','calc1.py',115),
  ('statement -> expression COMP_EQ expression','statement',3,'p_expression_comp','calc1.py',119),
  ('statement -> expression COMP_LE expression','statement',3,'p_expression_comp','calc1.py',120),
  ('statement -> expression COMP_GR expression','statement',3,'p_expression_comp','calc1.py',121),
  ('statement -> expression COMP_DIFF expression','statement',3,'p_expression_comp','calc1.py',122),
  ('statement -> expression COMP_EQ_GR expression','statement',3,'p_expression_comp','calc1.py',123),
  ('statement -> expression COMP_EQ_LE expression','statement',3,'p_expression_comp','calc1.py',124),
]
